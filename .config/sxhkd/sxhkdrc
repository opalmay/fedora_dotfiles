# make sxhkd reload its configuration files:
super + Escape
  pkill -USR1 -x sxhkd; notify-send 'sxhkd' 'Reloaded config'

# BSPWM HOTKEYS
# ~button1
#   bspc query -D -d 'focused.!occupied' && rofi -modi drun -show drun -show-icons
#

super + shift + Home
  notify-send suspending... && systemctl suspend

# quit/restart bspwm
super + shift + r
	bspc wm -r
super + shift + p
  bspc quit

# close and kill
super + q
  bspc node -c
super + shift + q
  bspc node -k

# alternate between the tiled and monocle layout
super + m
  bspc desktop -l next
  # bspwm_toggle_clean_monocle
  # bsp-layout set monocle
  # notify-send $(bsp-layout cycle --layouts tiled,tall,wide,grid)
  # windows=$(wmctrl -l|awk '\{$3=""; $2=""; $1=""; print $0\}'); \
  # while IFS= read -r window; do; \
  # transset-df -n $window 0; \
  # done; <<< "$windows" \

# mirror layout
# super + shift + m
# 	bspc node @/ -R 180

# move focused window to preselected area
#	bspc node -n 'last.!automatic.local'

# set tall layout
super + 0
  bsp-layout once tall

super + t
  bsp-layout once tall
  # bspc desktop -l next
  # bsp-layout set tiled
super + y
  bsp-layout once grid
#
# # send the newest marked node to the newest preselected node
#super + y
#	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
  bspwm_move_to_biggest_or_preselection


# STATE/FLAGS

# toggle fullscreen
super + f
	bspc node -t \~fullscreen

super + shift + f
  for node_i in $(bspc query -N -n '.!focused.window' -d focused);  \
	do \
	bspc node $node_i -g hidden; \
	done

# super + e
#   bspc node focused -t tiled

# toggle floating and show on all desktops
super + {_,shift + } s
	if [ -z "$(bspc query -N -n focused.floating)" ]; then \
		bspc node focused -t floating; \
	else \
		bspc node focused -t tiled; \
	fi; \ 
	{_,bspc node -g sticky}

# set the node flags
# super + ctrl + {m,b,y,z}
# 	bspc node -g {marked,locked,sticky,private}


# FOCUS/SWAP

# focus the node in the given direction
#super + {_,shift + }{h,j,k,l}
#	bspc node -{f,s} {west,south,north,east}

# focus window or monitor in direction
super + {h,j,k,l}
  dir={west,south,north,east}; \
  bspc node -f $dir || bspc monitor --focus $dir
 #  m='.local.!hidden.window'; \
	# bspwm_focus_direction {west$m next$m,south$m prev$m,north$m next$m,east$m prev$m}
# super + shift + {h,j,k,l}
#   bspc node -s {west,south,north,east}
super + shift + {h,j,k,l}
  dir={west,south,north,east}; \
	bspc node -s "$dir.local" --follow \
    || bspc node -m "$dir" --follow
# bspwm_smart_move {west,south,north,east}
# super + shift + {h,j,k,l}
# 	~/.config/bspwm/bspwm_smart_move {west,south,north,east}
# rotate tree
super + shift + {d,a}
	bspc node @/ -C {forward,backward}
# change tiling direction for focused window relative to parent
super + backslash
	bspc node @parent -R 90
# make all same size
super + equal
  bspc node @/ -B

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local
# move window to next desktop
super + shift + bracket{left,right}
	bspc node -d {prev,next} --follow

# focus next monitor
super + {semicolon,apostrophe}
  bspc monitor -f {prev,next}

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,ctrl + }{1-9,0}
	bspc {desktop -f,node -d} focused:'^{1-9,10}'

# use left hand for further desktops
super + e; super + {1-6}
  d=$(expr {1-6} + 6);\
  bspc desktop -f focused:"^$d"
  # bspc desktop -f focused:"^{7-10}"

# send to desktop and follow
super + shift + {1-9,0}
	bspc node -d focused:'^{1-9,10}' --follow


# PRESELECT

# preselect the direction
super + p ; super + {h,j,k,l,semicolon}
	bspc node -p {west,south,north,east,cancel}

# super + alt + {h,j,k,l}
# 	bspc node -p {west,south,north,east,cancel}
# preselect the ratio
super + alt + {1-9}
	bspc node -o 0.{1-9}
super + {u,n}
  bspc node -p {east,south}

# MOVE/RESIZE

# expand/contract a window 
super + ctrl + {h,j,k,l}
  delta=50; \
  { bspc node -z right -$delta 0; bspc node -z left +$delta 0, bspc node -z top 0 -$delta; bspc node -z bottom 0 +$delta, bspc node -z top 0 +$delta; bspc node -z bottom 0 -$delta, bspc node -z right +$delta 0; bspc node -z left -$delta 0 }
# bspwm_resize {left,down,up,right} 50

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-40 0,0 40,0 -40,40 0}

# change inner gaps
super + {ctrl, shift} + g
    { bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) + 10 )), \
    [ $(bspc config -d focused window_gap) -ge 10 ] && \
    bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) - 10 )) }

# APPLICATION KEYBINDINGS

# terminal emulator
super + Return
	st

super + shift + Return
	bspc rule -a St state=floating -o && st
# browser
super + b
  brave-browser --enable-features=VaapiVideoDecoder --disable-features=UseChromeOSDirectVideoDecoder

# dolphin
super + d
  dolphin

# lf
super + r
  st -e lf

# htop
ctrl + alt + Delete
	st -e htop


# SCRIPTS

# app launcher (mapped to super using ksuperkey)
alt + F1
  rofi -modi drun -show drun -show-icons

# switch display mode
# super + shift + m
# 	rofi -show fb -modi "fb:~/.local/bin/configure_displays" -location 2

# take a screenshot
Print
  maim -s --format png /dev/stdout | xclip -selection clipboard -t image/png -i; \
  notify-send -u low "Copied" "Screenshot copied to clipboard!"
super + Print
  maim -s ~/Pictures/Screenshots/$(date +%s).png; \
  notify-send -u low "Saved" "Screenshot saved!"

super + shift + Print
  flameshot gui

# Scratchpad
super + w
	i=$(bspc query -N -n "focused.floating");\
	if [ -n "$i" ];then \
		xprop -id $i -f _SCRATCH 32ii -set _SCRATCH $(date +%s,%N);\
		xdotool windowunmap $i;\
	else;\
		i=$(for w in $(xwininfo -root -children | grep -e "^\s*0x[0-9a-f]\+" -o);do \
			t=$(xprop -id $w _SCRATCH | grep ' = \(.*\)');\
			if [ -n "$t" ];then \
				echo $t $w;\
			fi;\
		done|sort -n|head -n1|cut -d" " -f 5);\
		if [ -n "$i" ];then \
			xprop -id $i -remove _SCRATCH;\
			bspc rule -a \* state=floating center=on --one-shot;\
			xdotool windowmap $i;\
			bspc node -f $i;\
		fi;\
	fi
# super + shift + t
#   bspwm_toggle_named_scratchpad teams2
super + shift + w
	id=$(bspc query -N -n "focused");\
	if [ -n "$id" ];then \
		xprop -id $id -f _SCRATCH 32ii -set _SCRATCH $(date +%s,%N);\
		bspc node -t "floating";\
		xdotool windowunmap $id;\
	fi

{ XF86AudioRaiseVolume, XF86AudioLowerVolume }
  pactl set-sink-volume 0 {+,-}5%
XF86AudioMute
  pactl set-sink-mute 0 toggle

XF86MonBrightness{Up,Down}
  brightnessctl s 1920{+,-}

# lock screen
super + shift + equal
  xscreensaver-command -lock
  # (pidof xscreensaver || xscreensaver --no-splash) && sleep 0.5 && xscreensaver-command -lock
  # cmatrixlock-bspwm

super + v
  roficlip && xclip -o --selection primary
  # roficlip

# toggle picom
super + shift + c
  killall picom || picom -b --config ~/.config/picom.conf --experimental-backends

# toggle autolock
XF86Display
  (killall xscreensaver && notify-send -u low "Autolock off") || (xscreensaver --no-splash & notify-send -u low "Autolock on")
  # (killall xautolock && notify-send -u low "Autolock off") || (xautolock -time 15 -locker "cmatrixlock-bspwm" -detectsleep & notify-send -u low "Autolock on")

# toggle headphones
{XF86HomePage, super + shift + o}
  toggle_headphones

super +ctrl + Escape
  xkill

XF86Calculator
  kcalc

super + shift + e
  bspwm_resize_16by9
# Super_R
#   xdotool click 8
